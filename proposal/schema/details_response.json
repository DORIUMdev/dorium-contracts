{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "DetailsResponse",
  "type": "object",
  "required": [
    "cw20_balance",
    "cw20_whitelist",
    "description",
    "id",
    "native_balance",
    "proposer",
    "source",
    "status",
    "validators"
  ],
  "properties": {
    "cw20_balance": {
      "description": "Balance in cw20 tokens",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Cw20Coin"
      }
    },
    "cw20_whitelist": {
      "description": "Whitelisted cw20 tokens",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "description": {
      "description": "more information about this proposal (URL to forum topic?)",
      "type": "string"
    },
    "id": {
      "description": "id is a human-readable name. It is the key in the mapping to store the Escrow state, so it cannot be changed. 3-20 bytes of utf-8 text",
      "type": "string"
    },
    "native_balance": {
      "description": "Balance in native tokens",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Coin"
      }
    },
    "proposer": {
      "description": "if approved, funds go to the proposer",
      "type": "string"
    },
    "source": {
      "description": "if refunded, funds go to the source (Dorium)",
      "type": "string"
    },
    "status": {
      "description": "status of the proposal (enum: opened, in progress, canceled, completed)",
      "allOf": [
        {
          "$ref": "#/definitions/Status"
        }
      ]
    },
    "validators": {
      "description": "validators assigned by Dorium can decide to approve or refund the escrow",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Cw20Coin": {
      "type": "object",
      "required": [
        "address",
        "amount"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Status": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "Opened"
          ],
          "properties": {
            "Opened": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "InProgress"
          ],
          "properties": {
            "InProgress": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Canceled"
          ],
          "properties": {
            "Canceled": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Completed"
          ],
          "properties": {
            "Completed": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
